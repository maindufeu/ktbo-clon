# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          
      - name: Checkout
  uses: actions/checkout@v2.3.4
  with:
    # Repository name with owner. For example, actions/checkout
    repository: # optional, default is ${{ github.repository }}
    # The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.

    ref: # optional
    # Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.

We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.

[Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)

    token: # optional, default is ${{ github.token }}
    # SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.

We recommend using a service account with the least permissions necessary.

[Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)

    ssh-key: # optional
    # Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example, `ssh-keyscan github.com`. The public key for github.com is always implicitly added.

    ssh-known-hosts: # optional
    # Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes` and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to configure additional hosts.

    ssh-strict: # optional, default is true
    # Whether to configure the token or SSH key with the local git config
    persist-credentials: # optional, default is true
    # Relative path under $GITHUB_WORKSPACE to place the repository
    path: # optional
    # Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching
    clean: # optional, default is true
    # Number of commits to fetch. 0 indicates all history for all branches and tags.
    fetch-depth: # optional, default is 1
    # Whether to download Git-LFS files
    lfs: # optional
    # Whether to checkout submodules: `true` to checkout submodules or `recursive` to recursively checkout submodules.

When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are converted to HTTPS.

    submodules: # optional
      
      - name: Repo Visualizer
  # You may pin to the exact commit or the version.
  # uses: githubocto/repo-visualizer@d89437ae41087c95815abff164cc3d64b37f323a
  uses: githubocto/repo-visualizer@0.3.0
  with:
    # A path (relative to the root of your repo) to where you would like the diagram to live. For example: images/diagram.svg. Default: diagram.svg
    output_file: # optional
    # A list of paths to exclude from the diagram, separated by commas. For example: dist,node_modules
    excluded_paths: # optional
    # The maximum number of nested folders to show files within. Default: 9
    max_depth: # optional
